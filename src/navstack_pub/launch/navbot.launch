<launch>

<!-- BEGIN: robot_pose_ekf package -->
    <!-- BEGIN: Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
    <!-- x y z roll pitch yaw parent_name child_name frequency-->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.06 0 0.08 0 0 0 base_link laser 30" />
    <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 30" />
    <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 30" />

    <!-- If we have a map, uncomment the map_to_odom -->
    <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
    <!-- map to odom will be provided by the AMCL -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" /> -->

    <!-- Map File -->
    <!-- <arg name="map_file" default="$(find navstack_pub)/maps/floorplan4.yaml"/> -->
    <!-- <arg name="map_file" default="$(find navstack_pub)/maps/map.yaml"/> -->
        
    <!-- Map Server -->
    <!-- Publish: /map, /map_metadata -->
    <!-- <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" /> -->




    <!-- For map generating purpose, comment the map_to_odom and use gmapping below -->
    <!-- Map to odom will be provided by the gmapping node -->
    <!-- Gmapping for SLAM -->
    <include file="$(find robot_mapping)/launch/rplidar_a1.launch"/>
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
        <param name="base_frame" value="base_link"/>
        <param name="odom_frame" value="odom"/>
        <param name="map_frame" value="map"/>
        <param name="scan_topic" value="/scan"/>
        <param name="use_tf_scan_transforms" value="true"/>
    </node>
<!-- END: Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 


    <!-- Robot Model -->
    <include file="$(find robot_model)/launch/robot_only_rviz.launch"/>    


    <!-- BEGIN: Wheel Odometry Publisher -->
    <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
    <!-- Publish: /odom_data_euler, /odom_data_quat -->
    <node name="ekf_odom_pub" pkg="localization_data_pub" type="ekf_odom_pub" output="screen"/>
    <!-- END: Wheel Odometry Publisher -->
        
    <!-- BEGIN: IMU Data Publisher Using the BNO055 IMU Sensor -->
    <!-- Publish: /imu/data -->
    <!-- <node ns="imu" name="imu_node" pkg="imu_bno055" type="bno055_i2c_node" respawn="true" respawn_delay="2">
        <param name="device" type="string" value="/dev/i2c-1"/> -->
        <!-- 0x28 == 40 is the default for BNO055 -->
        <!-- <param name="address" type="int" value="40"/> 
        <param name="frame_id" type="string" value="imu"/>
    </node> -->
    <!-- END: IMU Data Publisher Using the BNO055 IMU Sensor -->
        
<!-- BEGIN: Extended Kalman Filter from robot_pose_ekf Node-->
    <!-- Subscribe: /odom, /imu_data, /vo -->
    <!-- Publish: /robot_pose_ekf/odom_combined -->
    <remap from="odom" to="odom_data_quat" />
    <!-- <remap from="imu_data" to="imu/data" /> -->
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="base_footprint_frame" value="base_footprint"/>
        <param name="freq" value="30.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
        <!-- <param name="imu_used" value="true"/> -->
        <param name="vo_used" value="false"/>
        <param name="gps_used" value="false"/>
        <param name="debug" value="false"/>
        <param name="self_diagnose" value="false"/>
    </node>
    <!-- END: Extended Kalman Filter from robot_pose_ekf Node-->
        

    <!-- BEGIN: Initial Pose and Goal Publisher -->
    <!-- Publish: /initialpose, /move_base_simple/goal -->
    <!-- <node pkg="rviz" type="rviz" name="rviz" args="-d $(find navstack_pub)/navbot.rviz" required="true"/> -->

    <!-- Subscribe: /initialpose, /move_base_simple/goal -->
    <!-- Publish: /initial_2d, /goal_2d --> 
    <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d" /> 
    <!-- END: Initial Pose and Goal Publisher -->

    <!-- BEGIN: Set initial pose using .py file -->
    <!-- Define arguments with default values -->
    <arg name="x" default="0.0"/>   <!--modify this for x coordinate-->
    <arg name="y" default="0.0"/>   <!--modify this for y coordinate-->
    <arg name="yaw" default="0.0"/> <!--modify this for rotation around z-->

    <node name="pub_initpose_node" pkg="navstack_pub" type="setInitialPose.py" output="screen">
        <param name="x" value="$(arg x)"/>
        <param name="y" value="$(arg y)"/>
        <param name="yaw" value="$(arg yaw)"/> 
    </node>
    <!-- END: Set initial pose using .py file -->

<!-- END: robot_pose_ekf package -->
        
    <!-- Add AMCL example for differential drive robots for Localization -->
    <!-- Subscribe: /scan, /tf, /initialpose, /map -->
    <!-- Publish: /amcl_pose, /particlecloud, /tf -->
    <include file="$(find amcl)/examples/amcl_diff.launch"/>
    <!-- <include file="$(find robot_amcl)/launch/amcl.launch"/> -->
        


    <!-- Move Base Node -->
    <!-- Subscribe: /move_base_simple/goal -->
    <!-- Publish: /cmd_vel -->
    <!-- <arg name="cmd_vel_topic" default="/cmd_vel" />
    <arg name="odom_topic" default="odom" />
    <arg name="move_forward_only" default="false"/> -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

<!-- Only one local planner can be active at a time, and it is determined by the base_local_planner parameter. -->
        <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" /> -->
        <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
        
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />

        <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
        <!-- <rosparam file="$(find navstack_pub)/param/dwa_local_planner_params.yaml" command="load" />
        <rosparam file="$(find navstack_pub)/param/move_base_params.yaml" command="load" /> -->

        <!-- <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
        <remap from="odom" to="$(arg odom_topic)"/>
        <param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" /> -->
    </node>

</launch>